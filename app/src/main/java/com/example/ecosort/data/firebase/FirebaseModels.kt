package com.example.ecosort.data.firebase

import com.google.firebase.Timestamp
import com.google.firebase.firestore.DocumentId
import com.google.firebase.firestore.ServerTimestamp


// ==================== COMMUNITY FIREBASE MODELS ====================

/**
 * Firestore data model for community posts
 */
data class FirebaseCommunityPost(
    @DocumentId
    val id: String = "",
    val authorId: String = "",
    val authorName: String = "",
    val authorAvatar: String? = null,
    val title: String = "",
    val content: String = "",
    val postType: String = "TIP",
    val inputType: String = "TEXT",
    val imageUrls: List<String> = emptyList(),
    val videoUrl: String? = null,
    val location: String? = null,
    val tags: List<String> = emptyList(),
    @ServerTimestamp
    val postedAt: Timestamp? = null,
    val likesCount: Int = 0,
    val commentsCount: Int = 0,
    val sharesCount: Int = 0,
    val status: String = "PUBLISHED"
) {
    // No-argument constructor for Firestore
    constructor() : this(
        id = "",
        authorId = "",
        authorName = "",
        authorAvatar = null,
        title = "",
        content = "",
        postType = "TEXT",
        imageUrls = emptyList(),
        videoUrl = null,
        location = null,
        tags = emptyList(),
        postedAt = null,
        likesCount = 0,
        commentsCount = 0,
        sharesCount = 0,
        status = "PUBLISHED"
    )
}

/**
 * Firestore data model for community comments
 */
data class FirebaseCommunityComment(
    @DocumentId
    val id: String = "",
    val postId: String = "",
    val authorId: String = "",
    val authorName: String = "",
    val authorAvatar: String? = null,
    val content: String = "",
    val parentCommentId: String? = null,
    @ServerTimestamp
    val postedAt: Timestamp? = null,
    val likesCount: Int = 0
) {
    constructor() : this(
        id = "",
        postId = "",
        authorId = "",
        authorName = "",
        authorAvatar = null,
        content = "",
        parentCommentId = null,
        postedAt = null,
        likesCount = 0
    )
}

/**
 * Firestore data model for community likes
 */
data class FirebaseCommunityLike(
    @DocumentId
    val id: String = "",
    val postId: String = "",
    val userId: String = "",
    @ServerTimestamp
    val likedAt: Timestamp? = null
) {
    constructor() : this(
        id = "",
        postId = "",
        userId = "",
        likedAt = null
    )
}

// ==================== CONVERSION EXTENSIONS ====================

/**
 * Extension function to convert Firebase community post to local Room model
 */
fun FirebaseCommunityPost.toLocalModel(): com.example.ecosort.data.model.CommunityPost {
    return com.example.ecosort.data.model.CommunityPost(
        id = 0L, // Will be auto-generated by Room
        firebaseId = this.id, // Store the original Firebase ID
        authorId = this.authorId.toLongOrNull() ?: 0L,
        authorName = this.authorName,
        authorAvatar = this.authorAvatar,
        title = this.title,
        content = this.content,
        postType = try { com.example.ecosort.data.model.PostType.valueOf(this.postType) } catch (e: Exception) { com.example.ecosort.data.model.PostType.TIP },
        inputType = try { com.example.ecosort.data.model.InputType.valueOf(this.inputType) } catch (e: Exception) { com.example.ecosort.data.model.InputType.TEXT },
        imageUrls = this.imageUrls,
        videoUrl = this.videoUrl,
        location = this.location,
        tags = this.tags,
        postedAt = this.postedAt?.toDate()?.time ?: System.currentTimeMillis(),
        likesCount = this.likesCount,
        commentsCount = this.commentsCount,
        sharesCount = this.sharesCount,
        isLikedByUser = false, // Will be updated separately
        status = try { com.example.ecosort.data.model.PostStatus.valueOf(this.status) } catch (e: Exception) { com.example.ecosort.data.model.PostStatus.PUBLISHED }
    )
}

/**
 * Extension function to convert local Room model to Firebase community post
 */
fun com.example.ecosort.data.model.CommunityPost.toFirebaseModel(): FirebaseCommunityPost {
    return FirebaseCommunityPost(
        id = if (this.firebaseId.isNotEmpty()) this.firebaseId else "local_${this.id}_${System.currentTimeMillis()}",
        authorId = this.authorId.toString(),
        authorName = this.authorName,
        authorAvatar = this.authorAvatar,
        title = this.title,
        content = this.content,
        postType = this.postType.name,
        inputType = this.inputType.name,
        imageUrls = this.imageUrls,
        videoUrl = this.videoUrl,
        location = this.location,
        tags = this.tags,
        postedAt = Timestamp(java.util.Date(this.postedAt)),
        likesCount = this.likesCount,
        commentsCount = this.commentsCount,
        sharesCount = this.sharesCount,
        status = this.status.name
    )
}

/**
 * Extension function to convert Firebase community comment to local Room model
 */
fun FirebaseCommunityComment.toLocalModel(): com.example.ecosort.data.model.CommunityComment {
    return com.example.ecosort.data.model.CommunityComment(
        id = this.id.hashCode().toLong(), // Convert string ID to long for Room
        firebaseId = this.id, // Store the original Firebase ID
        postId = this.postId.toLongOrNull() ?: 0L,
        authorId = this.authorId.toLongOrNull() ?: 0L,
        authorName = this.authorName,
        authorAvatar = this.authorAvatar,
        content = this.content,
        parentCommentId = this.parentCommentId?.toLongOrNull(),
        postedAt = this.postedAt?.toDate()?.time ?: System.currentTimeMillis(),
        likesCount = this.likesCount,
        isLikedByUser = false // Will be updated separately
    )
}

/**
 * Extension function to convert local Room model to Firebase community comment
 */
fun com.example.ecosort.data.model.CommunityComment.toFirebaseModel(): FirebaseCommunityComment {
    return FirebaseCommunityComment(
        id = this.firebaseId.ifEmpty { this.id.toString() }, // Use firebaseId if available, otherwise use local ID
        postId = this.postId.toString(),
        authorId = this.authorId.toString(),
        authorName = this.authorName,
        authorAvatar = this.authorAvatar,
        content = this.content,
        parentCommentId = this.parentCommentId?.toString(),
        postedAt = Timestamp(java.util.Date(this.postedAt)),
        likesCount = this.likesCount
    )
}

// ==================== CHAT FIREBASE MODELS ====================

/**
 * Firebase model for chat messages
 */
data class FirebaseChatMessage(
    @DocumentId
    val id: String = "",
    val channelId: String = "",
    val senderId: String = "", // Using Firebase UID
    val senderUsername: String = "",
    val messageText: String = "",
    val messageType: String = "TEXT",
    val attachmentUrl: String? = null,
    val attachmentType: String? = null,
    val attachmentDuration: Long? = null,
    @ServerTimestamp
    val timestamp: Timestamp? = null,
    val readBy: List<String> = emptyList(), // List of Firebase UIDs who read the message
    val messageStatus: String = "SENDING"
) {
    constructor() : this("", "", "", "", "", "TEXT", null, null, null, null, emptyList(), "SENDING")
}

/**
 * Firebase model for conversations
 */
data class FirebaseConversation(
    @DocumentId
    val channelId: String = "",
    val participant1Id: String = "", // Firebase UID
    val participant1Username: String = "",
    val participant2Id: String = "", // Firebase UID
    val participant2Username: String = "",
    val lastMessageText: String? = null,
    @ServerTimestamp
    val lastMessageTimestamp: Timestamp? = null,
    val lastMessageSenderId: String? = null, // Firebase UID
    @ServerTimestamp
    val createdAt: Timestamp? = null
) {
    constructor() : this("", "", "", "", "", null, null, null, null)
}

// ==================== FRIEND FIREBASE MODELS ====================

/**
 * Firebase model for friend requests
 */
data class FirebaseFriendRequest(
    @DocumentId
    val id: String = "",
    val senderId: String = "", // Firebase UID
    val receiverId: String = "", // Firebase UID
    val status: String = "PENDING", // PENDING, ACCEPTED, DECLINED, CANCELLED
    val message: String? = null,
    @ServerTimestamp
    val createdAt: Timestamp? = null,
    @ServerTimestamp
    val updatedAt: Timestamp? = null
) {
    constructor() : this("", "", "", "PENDING", null, null, null)
}

/**
 * Firebase model for friendships
 */
data class FirebaseFriendship(
    @DocumentId
    val id: String = "",
    val userId1: String = "", // Firebase UID (always smaller UID first)
    val userId2: String = "", // Firebase UID
    @ServerTimestamp
    val createdAt: Timestamp? = null,
    @ServerTimestamp
    val lastInteraction: Timestamp? = null
) {
    constructor() : this("", "", "", null, null)
}

// ==================== FOLLOW FIREBASE MODELS ====================

/**
 * Firebase model for user follows
 */
data class FirebaseUserFollow(
    @DocumentId
    val id: String = "",
    val followerId: String = "", // Firebase UID of user who is following
    val followingId: String = "", // Firebase UID of user being followed
    @ServerTimestamp
    val followedAt: Timestamp? = null
) {
    constructor() : this("", "", "", null)
}